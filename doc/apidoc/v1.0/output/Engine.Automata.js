Ext.data.JsonP.Engine_Automata({"tagname":"class","name":"Engine.Automata","autodetected":{},"files":[{"filename":"ll_Automata.js","href":"ll_Automata.html#Engine-Automata"}],"uses":["Engine.State","Engine.StateGear","Kernel.Foundation.Enumerable.EnumerationOf"],"members":[{"name":"state","tagname":"property","owner":"Engine.Automata","id":"property-state","meta":{}},{"name":"constructor","tagname":"method","owner":"Engine.Automata","id":"method-constructor","meta":{}},{"name":"run","tagname":"method","owner":"Engine.Automata","id":"method-run","meta":{}},{"name":"switch","tagname":"method","owner":"Engine.Automata","id":"method-switch","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Engine.Automata","short_doc":"Creates a state machine. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"html":"<div><pre class=\"hierarchy\"><h4>Uses</h4><div class='dependency'><a href='#!/api/Engine.State' rel='Engine.State' class='docClass'>Engine.State</a></div><div class='dependency'><a href='#!/api/Engine.StateGear' rel='Engine.StateGear' class='docClass'>Engine.StateGear</a></div><div class='dependency'><a href='#!/api/Kernel.Foundation.Enumerable.EnumerationOf' rel='Kernel.Foundation.Enumerable.EnumerationOf' class='docClass'>Kernel.Foundation.Enumerable.EnumerationOf</a></div><h4>Files</h4><div class='dependency'><a href='source/ll_Automata.html#Engine-Automata' target='_blank'>ll_Automata.js</a></div></pre><div class='doc-contents'><p>Creates a state machine. A lluvia state machine has a continous and derivable state,\nmade of the previous, the current and the requested one. During state transition, several solicitor functions\nget executed: down function of the current state, up solicitor of the requested state and finally we arrive to the\nsteady state.</p>\n\n<h2>States</h2>\n\n<p>States refers to each of the states of a Finite Machine Automaton. See <a href=\"#!/api/Engine.State\" rel=\"Engine.State\" class=\"docClass\">State</a>\nfor a very detailed explanation. States are injected with an attribute 'owner' that refers to\nthe automata.</p>\n\n<h3>Warning</h3>\n\n<p>  Avoid using run for naming a state.</p>\n\n<h2>Solicitors</h2>\n\n<p>Solicitors are the drivers that run every single <a href=\"#!/api/Engine.State\" rel=\"Engine.State\" class=\"docClass\">state</a>. Despite\nyou can manually add the drivers to every state, the Automata constructor comes with a\nfacility to specify all the drivers at once.</p>\n\n<p>Define an object as in the following example to be used as the solicitor constructor param:</p>\n\n<pre><code>{\n       walking: function() {\n           return \"I'm walking\"\n       },\n       running: [\n\n           function() {\n               return \"I'm running\"\n           }, {\n               slow: function() {\n                   return \"I'm running slow\"\n               },\n               \"slow.steady\": function() {\n                   return \"But steadily\"\n               },\n               fast: function() {\n                   return \"I'm running fast\"\n               }\n           }\n       ]\n   }\n</code></pre>\n\n<p>See that when no substates are given you can directly define a function driver.\nNotice too, that defining a regime driver is made by typing between quotes</p>\n\n<h2>Inner Structure</h2>\n\n<pre><code>var solicitors = {\n        walking: function() {\n            return \"I'm walking with my shoes.\"\n        },\n        \"walking.down\": function() {\n            alert(\"Im taking my shoes off.\")\n\n        },\n        \"walking.up\": function() {\n            alert(\"Im putting my shoes on.\")\n        },\n        running: [\n\n            function() {\n                return \"I'm running\"\n            }, {\n                slow: function() {\n                    return \"I'm running slow\"\n                },\n                \"slow.up\": function() {\n                    alert(\"I got my slow sneakers\")\n                },\n                \"slow.steady\": function() {\n                    return \"But steadily\"\n                },\n                fast: function() {\n                    return \"I'm running fast\"\n                }\n            }\n        ],\n        \"running.up\": function() {\n            alert(\"Im putting my sneakers on.\")\n        },\n        \"running.down\": function() {\n            alert(\"Im taking my sneakers off.\")\n\n        }\n}\n\nvar a = new Automata([\"*walking\", \"running\", [\"slow\", \"fast\"]], solicitors)\na.state.toSource()\n\n//=&gt; ( { walking: {\n//=&gt;                0:   (function () {\n//=&gt;                         return State.prototype._run.apply(that, arguments)\n//=&gt;                     }),\n//=&gt;                run: (function () {\n//=&gt;                        return \"I'm walking with my shoes.\"\n//=&gt;                     })\n//=&gt;              },\n//=&gt;     running: {\n//=&gt;                1:    (function () {\n//=&gt;                          return State.prototype._run.apply(that, arguments)\n//=&gt;                       }),\n//=&gt;                run:  (function () {\n//=&gt;                          return \"I'm running\"\n//=&gt;                        }),\n//=&gt;                slow: {\n//=&gt;                        1:   {1:{}},\n//=&gt;                        run: (function () {\n//=&gt;                                  return \"I'm running slow\"\n//=&gt;                              }),\n//=&gt;                        '1.1':(function () {\n//=&gt;                                  return State.prototype._run.apply(that, arguments)\n//=&gt;                               })\n//=&gt;                      },\n//=&gt;                fast: {\n//=&gt;                        1: {2:{}},\n//=&gt;                        run: (function () {\n//=&gt;                                  return \"I'm running fast\"\n//=&gt;                              }),\n//=&gt;                        '1.2': (function () {\n//=&gt;                                     return State.prototype._run.apply(that, arguments)\n//=&gt;                                })\n//=&gt;                       }\n//=&gt;              },\n//=&gt;     none: {\n//=&gt;             '-1': (function () {\n//=&gt;                         return State.prototype._run.apply(that, arguments)\n//=&gt;                   }),\n//=&gt;             run: (function () {})\n//=&gt;           }\n//=&gt; })\n</code></pre>\n\n<p>As we can see, every state is made of a\n<a href=\"#!/api/Kernel.Foundation.DataType.VersionNumber\" rel=\"Kernel.Foundation.DataType.VersionNumber\" class=\"docClass\">VersionNumber</a>, which is the\nVersionNumber itself ( for fast will be: {1: {2:{}}} ) plus to additional\nattributes: 'run' and the result of VersionNumber#toString\n('1.2' in the example). When this attribute, containing a function, is\ntriggered a generic _run function is called. Then user defined run function,\nusually called the driver of the state is executed.</p>\n\n<p>Some additional functions can be defined as attributes of run: up, steady\nand down, to be more precise. Those functions can be used to\nfacilitate a smooth transition between states.</p>\n\n<p>The automata is driven by an object (StateGear) that takes into account\nwhen a transition is running on the Automata.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-state' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Engine.Automata'>Engine.Automata</span><br/><a href='source/ll_Automata.html#Engine-Automata-property-state' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Engine.Automata-property-state' class='name expandable'>state</a> : Enumeration<span class=\"signature\"></span></div><div class='description'><div class='short'>Group of constants representing the\n                              numbers for every possible state. ...</div><div class='long'><p>Group of constants representing the\n                              numbers for every possible state.</p>\n\n<h3>Example</h3>\n\n<pre><code>this.state = new Enumeration(\"killing\", \"running\", [\"phase1\", \"phase2\"], \"supended\")\n//=&gt; {\n//=&gt;    killing:    {0:{}},\n//=&gt;    running:    {1:{}, phase1:{1:{1:{}}}, phase2:{1:{2:{}}}},\n//=&gt;    supended:   {2:{}})\n//=&gt; }\n</code></pre>\n\n<p>Every value, despite it is actually an object, it behaves as a number.</p>\n\n<pre><code>this.state.running.phase2 == 2\n//=&gt; true\n</code></pre>\n\n<p>And keeps track of its path.</p>\n\n<pre><code>this.state.running.phase2.toString()\n//=&gt; \"1.2\"\n</code></pre>\n\n<p>Entrusted with the gifts of Enumeration we cand do:</p>\n\n<pre><code>this.state.keys()\n//=&gt; [\"killing\", \"running\", \"supended\"]\n</code></pre>\n\n<p>and</p>\n\n<pre><code>this.state.running.branches()\n//=&gt; [\"phase1\", \"phase2\"]\n</code></pre>\n\n<p>And because of the special VersionNumber method toString and the mathematical ring\ncomposed by VersionNumber, InterleavedArray and Enumerate we can state:</p>\n\n<pre><code>// InterleavedArray mate.\nvar i = new InterleavedArray(\"a\", \"b\", [\"b1\", \"b2\"], \"c\")\ni[this.state.running.phase1]\n//=&gt; \"b1\"\n</code></pre>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Engine.Automata'>Engine.Automata</span><br/><a href='source/ll_Automata.html#Engine-Automata-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Engine.Automata-method-constructor' class='name expandable'>Engine.Automata</a>( <span class='pre'>states, solicitor</span> ) : Automata<span class=\"signature\"></span></div><div class='description'><div class='short'>Example\n\nvar state = new Enumeration(\"initial\", \"running\", \"sleeping\")\nvar a = new Automata( states,\n                ...</div><div class='long'><h2>Example</h2>\n\n<pre><code>var state = new Enumeration(\"initial\", \"running\", \"sleeping\")\nvar a = new Automata( states,\n                     {previous:  state.initial,\n                      current:   state.initial,\n                      requested: state.running })\n</code></pre>\n\n<p>or, for nested states:</p>\n\n<pre><code>var a = new Automata([\"killing\", [\"running\", [\"phase1\", \"phase2\"], \"supended\" ]])\n</code></pre>\n\n<p>If you want to request a given state upon start, please mark with an asterisk, as in this example.</p>\n\n<pre><code>var a = new Automata([\"killing\", [\"running\", [\"*phase1\", \"phase2\"], \"supended\" ]])\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>states</span> : Object | Array<div class='sub-desc'><p>Possibles states of an automata (Enumeration).\n                                  Array is an extension for Hierarchical State Machines.\n                                  Avoid calling run to a state.</p>\n</div></li><li><span class='pre'>solicitor</span> : Array<div class='sub-desc'><p>State Manager functions. An array with three functions (up, steady, down).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Automata</span><div class='sub-desc'><p>New created state machine automata..</p>\n</div></li></ul></div></div></div><div id='method-run' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Engine.Automata'>Engine.Automata</span><br/><a href='source/ll_Automata.html#Engine-Automata-method-run' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Engine.Automata-method-run' class='name expandable'>run</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Behavior of the automata according to its internal state. ...</div><div class='long'><p>Behavior of the automata according to its internal state.\nThis function takes care of state transitions.</p>\n</div></div></div><div id='method-switch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Engine.Automata'>Engine.Automata</span><br/><a href='source/ll_Automata.html#Engine-Automata-method-switch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Engine.Automata-method-switch' class='name expandable'>switch</a>( <span class='pre'>state</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Selects a new state to be updated to in next run. ...</div><div class='long'><p>Selects a new state to be updated to in next run.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : String | State<div class='sub-desc'><p>this.state.running.slow or \"running.slow\" for instance.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});