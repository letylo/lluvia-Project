Ext.data.JsonP.Device({"tagname":"class","name":"Device","extends":"Processor","mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-Device","members":{"cfg":[],"property":[],"method":[{"name":"constructor","tagname":"method","owner":"Device","meta":{},"id":"method-constructor"},{"name":"get","tagname":"method","owner":"Processor","meta":{},"id":"method-get"},{"name":"kill","tagname":"method","owner":"Processor","meta":{},"id":"method-kill"},{"name":"newThread","tagname":"method","owner":"Processor","meta":{},"id":"method-newThread"},{"name":"register","tagname":"method","owner":"Processor","meta":{},"id":"method-register"},{"name":"run","tagname":"method","owner":"Processor","meta":{},"id":"method-run"},{"name":"start","tagname":"method","owner":"Processor","meta":{},"id":"method-start"},{"name":"step","tagname":"method","owner":"Processor","meta":{},"id":"method-step"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":1,"files":[{"filename":"ll_Device.js","href":"ll_Device.html#Device"}],"html_meta":{},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":["Processor"],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/Processor' rel='Processor' class='docClass'>Processor</a><div class='subclass '><strong>Device</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ll_Device.html#Device' target='_blank'>ll_Device.js</a></div></pre><div class='doc-contents'><p>Provides an asynchronous mechanism for communicating with another devices.\nIn practical terms, it uses a message queue and fires events.\nI doesn't have a window on his own but handles Gates to communicate\nwith HTML DOM.</p>\n\n<h3>Example of use:</h3>\n\n<pre><code>// EXAMPLE APP DEVICE\n// ButtonGate Example\nButtonGate.prototype = new Gate\nButtonGate.prototype.constructor = ButtonGate\n\nfunction ButtonGate(el){\n    if (arguments.length)\n        Gate.call(this, el)\n}\n// No 'device' references are provided in the constructor\n\n\nButtonGate.prototype.do_onclick = function(event, element){\n    alert(\"You have made click.\")\n}\n\nTryApp.prototype = new Device\nTryApp.prototype.constructor = TryApp\n\n\n\nfunction TryApp(){\n    //  self reference for static methods\n    var that = this;\n\n    // class reference for instance objects\n    this._class = that\n\n\n    //  private static vars\n    Device.call(this, null)\n    this.newGate(\"llaveEnMano\", ButtonGate)\n // Device#newGate inject a device property inside\n // the ButtonGate object pointing to _this_.\n    this.solicitors[this.state.running][this.stateChange.steady] = function(){\n        that.gates[0].panel.innerHTML = new Date()\n    }\n}\n</code></pre>\n\n<p>We have to be very carefull with non idempotent methods (specially function references),\nbecause they are called twice during inheritance processes. Once in xxx.prototype = new yy\nand another time at object initialization \" yyy.call(xxx, params) \"</p>\n\n<p>Third generation inheritance generates constructor calls with null arguments Enumeration with all possible states. Default values are listed below. The three functions (up, steady and down) that drive any state. EventDispatcher object. Handles in and out communications. Holds the current state of the device. List of all attached Gates.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Device'>Device</span><br/><a href='source/ll_Device.html#Device-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Device-method-constructor' class='name expandable'>Device</a>( <span class='pre'>[view], [state], [currentState], [parent]</span> ) : <a href=\"#!/api/Device\" rel=\"Device\" class=\"docClass\">Device</a></div><div class='description'><div class='short'>Creates a Device. ...</div><div class='long'><p>Creates a Device.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> | HTMLElement (optional)<div class='sub-desc'><p>A possible view associated with the Device.</p>\n</div></li><li><span class='pre'>state</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>Default Device states -as ll_Enumeration- are: suspended, running, suspending, killing and killed.</p>\n</div></li><li><span class='pre'>currentState</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>Sets the initial conditions for the device to start.</p>\n<p>Defaults to: <code>{ previous: state.suspended, current: state.suspended, requested: state.running }</code></p></div></li><li><span class='pre'>parent</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>Parent Device or processor this Device belongs to.</p>\n<p>Defaults to: <code>Processor</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Device\" rel=\"Device\" class=\"docClass\">Device</a></span><div class='sub-desc'>\n</div></li></ul><p>Overrides: <a href='#!/api/Processor-method-constructor' rel='Processor-method-constructor' class='docClass'>Processor.constructor</a></p></div></div></div><div id='method-get' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Processor' rel='Processor' class='defined-in docClass'>Processor</a><br/><a href='source/ll_Processor.html#Processor-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Processor-method-get' class='name expandable'>get</a>( <span class='pre'>object</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></div><div class='description'><div class='short'>Stereotypical mirage fetcher. ...</div><div class='long'><p>Stereotypical mirage fetcher. Get objects or functions passed as a reference or\n belonging to a class hierarchy.\n A object can be repeated as long as you can push an object twice in the threads array\n with the same or different solicitor function. <a href=\"#!/api/Processor-method-get\" rel=\"Processor-method-get\" class=\"docClass\">Processor.get</a> avoids repetion as\n in sql select distinct.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>object or class reference.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></span><div class='sub-desc'><p>Array with collected objects or an empty array is anything is found.</p>\n</div></li></ul></div></div></div><div id='method-kill' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Processor' rel='Processor' class='defined-in docClass'>Processor</a><br/><a href='source/ll_Processor.html#Processor-method-kill' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Processor-method-kill' class='name expandable'>kill</a>( <span class='pre'>rObject, solicitorF</span> )</div><div class='description'><div class='short'>Removes a thread out of the execution queue. ...</div><div class='long'><p>Removes a thread out of the execution queue.</p>\n\n<p>@memberOf   {Processor}</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rObject</span> : <a href=\"#!/api/Thread\" rel=\"Thread\" class=\"docClass\">Thread</a><div class='sub-desc'><p>Object to be removed from the execution queue.</p>\n</div></li><li><span class='pre'>solicitorF</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'><p>As far as an object can be processed by several parallel solicitors function, one can be removed. (This is a fairly overenthusiastic feature indeed)</p>\n</div></li></ul></div></div></div><div id='method-newThread' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Processor' rel='Processor' class='defined-in docClass'>Processor</a><br/><a href='source/ll_Processor.html#Processor-method-newThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Processor-method-newThread' class='name expandable'>newThread</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Executes periodically a function in a new Thread. ...</div><div class='long'><p>Executes periodically a function in a new Thread.</p>\n\n<p>Not tested. ruby -e \"puts 'sorry ' * 20\"</p>\n\n<h3>Example</h3>\n\n<p>   $Processor.newThread(function() {</p>\n\n<pre><code> for (var i=0; i&lt;1000; i++)\n    \"Love others as your code\"\n</code></pre>\n\n<p>   })</p>\n</div></div></div><div id='method-register' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Processor' rel='Processor' class='defined-in docClass'>Processor</a><br/><a href='source/ll_Processor.html#Processor-method-register' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Processor-method-register' class='name expandable'>register</a>( <span class='pre'>cObject, solicitorF</span> )</div><div class='description'><div class='short'>Add a thread in the execution queue\n@memberOf   {Processor} ...</div><div class='long'><p>Add a thread in the execution queue\n@memberOf   {Processor}</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cObject</span> : <a href=\"#!/api/Thread\" rel=\"Thread\" class=\"docClass\">Thread</a><div class='sub-desc'><p>Is the caller object to be porocessed through the thread interface.</p>\n</div></li><li><span class='pre'>solicitorF</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'><p>Control loop object. Typically \"run\".</p>\n</div></li></ul></div></div></div><div id='method-run' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Processor' rel='Processor' class='defined-in docClass'>Processor</a><br/><a href='source/ll_Processor.html#Processor-method-run' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Processor-method-run' class='name expandable'>run</a>( <span class='pre'>date</span> )</div><div class='description'><div class='short'>Execute all threads. ...</div><div class='long'><p>Execute all threads. Top processors are called by themselves.\nLower tiers can belong (be registered) in another's Processor#thread. Then\na date is passed as a parameter in order to keep lower time lags between\n<a href=\"#!/api/Thread-method-run\" rel=\"Thread-method-run\" class=\"docClass\">Thread.run</a> calls. Thus, all registered threads are informed of the same (date)\ntime.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>date</span> : <a href=\"#!/api/Date\" rel=\"Date\" class=\"docClass\">Date</a><div class='sub-desc'><p>Parent's processor time.</p>\n</div></li></ul></div></div></div><div id='method-start' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Processor' rel='Processor' class='defined-in docClass'>Processor</a><br/><a href='source/ll_Processor.html#Processor-method-start' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Processor-method-start' class='name expandable'>start</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Start Processor.run cycle. ...</div><div class='long'><p>Start <a href=\"#!/api/Processor-method-run\" rel=\"Processor-method-run\" class=\"docClass\">Processor.run</a> cycle.</p>\n</div></div></div><div id='method-step' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Processor' rel='Processor' class='defined-in docClass'>Processor</a><br/><a href='source/ll_Processor.html#Processor-method-step' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Processor-method-step' class='name expandable'>step</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Execute all threads one step. ...</div><div class='long'><p>Execute all threads one step.</p>\n\n<p>@memberOf   {Processor}</p>\n</div></div></div></div></div></div></div>"});